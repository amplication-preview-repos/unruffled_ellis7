/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Player as PrismaPlayer,
  Prediction as PrismaPrediction,
  Team as PrismaTeam,
} from "@prisma/client";

export class PlayerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PlayerCountArgs, "select">): Promise<number> {
    return this.prisma.player.count(args);
  }

  async players<T extends Prisma.PlayerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerFindManyArgs>
  ): Promise<PrismaPlayer[]> {
    return this.prisma.player.findMany<Prisma.PlayerFindManyArgs>(args);
  }
  async player<T extends Prisma.PlayerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerFindUniqueArgs>
  ): Promise<PrismaPlayer | null> {
    return this.prisma.player.findUnique(args);
  }
  async createPlayer<T extends Prisma.PlayerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerCreateArgs>
  ): Promise<PrismaPlayer> {
    return this.prisma.player.create<T>(args);
  }
  async updatePlayer<T extends Prisma.PlayerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerUpdateArgs>
  ): Promise<PrismaPlayer> {
    return this.prisma.player.update<T>(args);
  }
  async deletePlayer<T extends Prisma.PlayerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PlayerDeleteArgs>
  ): Promise<PrismaPlayer> {
    return this.prisma.player.delete(args);
  }

  async findPredictions(
    parentId: string,
    args: Prisma.PredictionFindManyArgs
  ): Promise<PrismaPrediction[]> {
    return this.prisma.player
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .predictions(args);
  }

  async getTeam(parentId: string): Promise<PrismaTeam | null> {
    return this.prisma.player
      .findUnique({
        where: { id: parentId },
      })
      .team();
  }
}
